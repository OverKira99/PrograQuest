<resources>
    <string name="app_name">Prograquest</string>
    <string name="evaluacion">Evaluacion</string>
    <string name="lecciones">Lecciones</string>
    <string name="salida_del_codigo">Salida Del Codigo</string>
    <string name="ejecutar">Ejecutar</string>
    <string name="escribe_tu_c_digo_python">Escribe tu código Python</string>
    <string name="cambiar_imagen">Cambiar imagen</string>
    <string name="profile_image">Profile Image</string>
    <string name="large_text">
     <string-array name="topics_array">
         <item>IF</item>
         <item>WHILE</item>
         <item>FOR</item>
         <item>SWITCH</item>
     </string-array>
        "Material is the metaphor.\n\n"

        "A material metaphor is the unifying theory of a rationalized space and a system of motion."
        "The material is grounded in tactile reality, inspired by the study of paper and ink, yet "
        "technologically advanced and open to imagination and magic.\n"
        "Surfaces and edges of the material provide visual cues that are grounded in reality. The "
        "use of familiar tactile attributes helps users quickly understand affordances. Yet the "
        "flexibility of the material creates new affordances that supercede those in the physical "
        "world, without breaking the rules of physics.\n"
        "The fundamentals of light, surface, and movement are key to conveying how objects move, "
        "interact, and exist in space and in relation to each other. Realistic lighting shows "
        "seams, divides space, and indicates moving parts.\n\n"

        "Bold, graphic, intentional.\n\n"

        "The foundational elements of print based design typography, grids, space, scale, color, "
        "and use of imagery guide visual treatments. These elements do far more than please the "
        "eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge to edge "
        "imagery, large scale typography, and intentional white space create a bold and graphic "
        "interface that immerse the user in the experience.\n"
        "An emphasis on user actions makes core functionality immediately apparent and provides "
        "waypoints for the user.\n\n"

        "Motion provides meaning.\n\n"

        "Motion respects and reinforces the user as the prime mover. Primary user actions are "
        "inflection points that initiate motion, transforming the whole design.\n"
        "All action takes place in a single environment. Objects are presented to the user without "
        "breaking the continuity of experience even as they transform and reorganize.\n"
        "Motion is meaningful and appropriate, serving to focus attention and maintain continuity. "
        "Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.\n\n"

        "3D world.\n\n"

        "The material environment is a 3D space, which means all objects have x, y, and z "
        "dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the "
        "positive z-axis extending towards the viewer. Every sheet of material occupies a single "
        "position along the z-axis and has a standard 1dp thickness.\n"
        "On the web, the z-axis is used for layering and not for perspective. The 3D world is "
        "emulated by manipulating the y-axis.\n\n"

        "Light and shadow.\n\n"

        "Within the material environment, virtual lights illuminate the scene. Key lights create "
        "directional shadows, while ambient light creates soft shadows from all angles.\n"
        "Shadows in the material environment are cast by these two light sources. In Android "
        "development, shadows occur when light sources are blocked by sheets of material at "
        "various positions along the z-axis. On the web, shadows are depicted by manipulating the "
        "y-axis only. The following example shows the card with a height of 6dp.\n\n"

        "Resting elevation.\n\n"

        "All material objects, regardless of size, have a resting elevation, or default elevation "
        "that does not change. If an object changes elevation, it should return to its resting "
        "elevation as soon as possible.\n\n"

        "Component elevations.\n\n"

        "The resting elevation for a component type is consistent across apps (e.g., FAB elevation "
        "does not vary from 6dp in one app to 16dp in another app).\n"
        "Components may have different resting elevations across platforms, depending on the depth "
        "of the environment (e.g., TV has a greater depth than mobile or desktop).\n\n"

        "Responsive elevation and dynamic elevation offsets.\n\n"

        "Some component types have responsive elevation, meaning they change elevation in response "
        "to user input (e.g., normal, focused, and pressed) or system events. These elevation "
        "changes are consistently implemented using dynamic elevation offsets.\n"
        "Dynamic elevation offsets are the goal elevation that a component moves towards, relative "
        "to the component’s resting state. They ensure that elevation changes are consistent "
        "across actions and component types. For example, all components that lift on press have "
        "the same elevation change relative to their resting elevation.\n"
        "Once the input event is completed or cancelled, the component will return to its resting "
        "elevation.\n\n"

        "Avoiding elevation interference.\n\n"

        "Components with responsive elevations may encounter other components as they move between "
        "their resting elevations and dynamic elevation offsets. Because material cannot pass "
        "through other material, components avoid interfering with one another any number of ways, "
        "whether on a per component basis or using the entire app layout.\n"
        "On a component level, components can move or be removed before they cause interference. "
        "For example, a floating action button (FAB) can disappear or move off screen before a "
        "user picks up a card, or it can move if a snackbar appears.\n"
        "On the layout level, design your app layout to minimize opportunities for interference. "
        "For example, position the FAB to one side of stream of a cards so the FAB won’t interfere "
        "when a user tries to pick up one of cards.\n\n"
    </string>
    <string name="cargando">Cargando...</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="enviar">Enviar</string>
    <string name="opci_n_3">Opción 3</string>
    <string name="opci_n_2">Opción 2</string>
    <string name="opci_n_1">Opción 1</string>
    <string name="imagen_de_perfil">Imagen de perfil</string>
    <string name="correo_del_usuario">Correo del usuario</string>
    <string name="modo_oscuro">Modo Oscuro</string>
    <string name="ver_tabla_de_clasificaciones">Ver Tabla de Clasificaciones</string>
    <string name="cerrar_sesi_n">Cerrar Sesión</string>
    <string name="sentencias_condicionales_for">Sentencias Condicionales FOR</string>
    <string name="sentencias_condicionales_while">Sentencias Condicionales WHILE</string>
    <string name="sentencias_condicionales_swich">Sentencias Condicionales SWICH</string>
    <string name="sentencias_condicionales_if">Sentencias Condicionales IF</string>
    <string name="en_python_los_errores_frecuentes_son_al_usar_diccionarios_es_f_cil_omitir_valores_predeterminados_los_bloques_de_if_elif_else_pueden_volverse_dif_ciles_de_mantener_si_son_demasiado_largos">En Python, los errores frecuentes son: • Al usar diccionarios, es fácil omitir valores predeterminados. • Los bloques de if-elif-else pueden volverse difíciles de mantener si son demasiado largos.</string>
    <string name="en_java_los_errores_m_s_comunes_incluyen_olvidar_el_break_puede_llevar_a_la_ejecuci_n_de_m_ltiples_bloques_no_implementar_un_caso_default_puede_dejar_situaciones_sin_manejar">En Java, los errores más comunes incluyen: • Olvidar el break puede llevar a la ejecución de múltiples bloques. • No implementar un caso default puede dejar situaciones sin manejar.</string>
    <string name="complejidad_en_comparaci_n_con_un_switch_aunque_if_elif_else_es_funcional_puede_ser_menos_legible_y_m_s_propenso_a_errores_cuando_hay_muchas_condiciones">Complejidad en comparación con un switch: Aunque if-elif-else es funcional, puede ser menos legible y más propenso a errores cuando hay muchas condiciones.</string>
    <string name="_3_alternativa_al_switch_en_python_python_no_tiene_una_sentencia_switch_nativa_sin_embargo_se_pueden_lograr_resultados_similares_usando_estructuras_como_if_elif_else_o_diccionarios_de_funciones">3. Alternativa al switch en Python Python no tiene una sentencia switch nativa. Sin embargo, se pueden lograr resultados similares usando estructuras como if-elif-else o diccionarios de funciones.</string>
    <string name="errores_comunes_en_java_olvidar_el_break_despu_s_de_cada_case_esto_provoca_que_se_ejecuten_todos_los_casos_siguientes_hasta_encontrar_un_break_fall_through_lo_que_puede_causar_resultados_inesperados_no_manejar_el_caso_default_aunque_es_opcional_es_una_buena_pr_ctica_para_manejar_valores_no_esperados">Errores comunes en Java: Olvidar el break después de cada case: Esto provoca que se ejecuten todos los casos siguientes hasta encontrar un break (fall-through), lo que puede causar resultados inesperados. No manejar el caso default: Aunque es opcional, es una buena práctica para manejar valores no esperados.</string>
    <string name="en_este_ejemplo_dependiendo_del_valor_de_dia_se_ejecuta_el_bloque_de_c_digo_correspondiente_si_dia_es_3_se_imprimir_mi_rcoles">En este ejemplo, dependiendo del valor de dia, se ejecuta el bloque de código correspondiente. Si dia es 3, se imprimirá \'\'Miércoles\'\'.</string>
    <string name="_2_sentencia_switch_en_java_en_java_la_estructura_de_un_switch_es_la_siguiente">2. Sentencia switch en Java En Java, la estructura de un switch es la siguiente:</string>
    <string name="_1_introducci_n_la_sentencia_switch_se_utiliza_para_seleccionar_entre_m_ltiples_bloques_de_c_digo_basados_en_el_valor_de_una_expresi_n_es_una_alternativa_m_s_limpia_y_eficiente_que_usar_m_ltiples_sentencias_if_else_encadenadas_cuando_se_manejan_m_ltiples_condiciones_basadas_en_el_mismo_valor">1. Introducción La sentencia switch se utiliza para seleccionar entre múltiples bloques de código basados en el valor de una expresión. Es una alternativa más limpia y eficiente que usar múltiples sentencias if-else encadenadas cuando se manejan múltiples condiciones basadas en el mismo valor.</string>
    <string name="_1_introducci_n_los_bucles_while_permiten_ejecutar_un_bloque_de_c_digo_repetidamente_mientras_se_cumpla_una_condici_n_son_tiles_cuando_el_n_mero_de_iteraciones_no_est_definido_de_antemano_ya_que_dependen_de_la_evaluaci_n_continua_de_una_condici_n_l_gica">1. Introducción Los bucles while permiten ejecutar un bloque de código repetidamente mientras se cumpla una condición. Son útiles cuando el número de iteraciones no está definido de antemano, ya que dependen de la evaluación continua de una condición lógica.</string>
    <string name="_2_bucle_while_en_java_en_java_la_estructura_del_bucle_while_es_la_siguiente">2. Bucle while en Java En Java, la estructura del bucle while es la siguiente:</string>
    <string name="en_este_ejemplo_el_bucle_se_ejecuta_mientras_la_variable_i_sea_menor_que_5_en_cada_iteraci_n_el_valor_de_i_se_incrementa_asegurando_que_eventualmente_la_condici_n_se_vuelva_falsa">En este ejemplo, el bucle se ejecuta mientras la variable i sea menor que 5. En cada iteración, el valor de i se incrementa, asegurando que eventualmente la condición se vuelva falsa.</string>
    <string name="errores_comunes_en_java_olvidar_actualizar_la_condici_n_dentro_del_bucle_esto_puede_causar_bucles_infinitos_definir_mal_la_condici_n_inicial_si_la_condici_n_es_falsa_desde_el_inicio_el_bucle_no_se_ejecutar_acceder_a_variables_no_inicializadas_aseg_rate_de_declarar_e_inicializar_las_variables_antes_de_usarlas_en_la_condici_n">Errores comunes en Java: Olvidar actualizar la condición dentro del bucle: Esto puede causar bucles infinitos. Definir mal la condición inicial: Si la condición es falsa desde el inicio, el bucle no se ejecutará. Acceder a variables no inicializadas: Asegúrate de declarar e inicializar las variables antes de usarlas en la condición.</string>
    <string name="_3_bucle_while_en_python_en_python_la_estructura_del_bucle_while_es_similar_pero_m_s_concisa">3. Bucle while en Python En Python, la estructura del bucle while es similar pero más concisa:</string>
    <string name="en_este_ejemplo_el_bucle_se_ejecuta_mientras_la_condici_n_i_5_sea_verdadera_la_variable_i_se_incrementa_en_cada_iteraci_n_evitando_un_bucle_infinito"><![CDATA[En este ejemplo, el bucle se ejecuta mientras la condición i < 5 sea verdadera. La variable i se incrementa en cada iteración, evitando un bucle infinito.]]></string>
    <string name="errores_comunes_en_python_olvidar_actualizar_la_condici_n_al_igual_que_en_java_esto_puede_llevar_a_bucles_infinitos_indentaci_n_incorrecta_python_requiere_una_indentaci_n_consistente_de_lo_contrario_se_generar_un_indentationerror_falta_del_car_cter_en_la_declaraci_n_del_while_esto_producir_un_syntaxerror">Errores comunes en Python: Olvidar actualizar la condición: Al igual que en Java, esto puede llevar a bucles infinitos. Indentación incorrecta: Python requiere una indentación consistente; de lo contrario, se generará un IndentationError. Falta del carácter : en la declaración del while: Esto producirá un SyntaxError.</string>
    <string name="en_java_los_errores_m_s_comunes_incluyen_olvidar_incrementar_o_modificar_la_variable_de_control_puede_resultar_en_un_bucle_infinito_definir_mal_la_condici_n_puede_evitar_que_el_bucle_se_ejecute_en_python_los_errores_frecuentes_son">En Java, los errores más comunes incluyen: • Olvidar incrementar o modificar la variable de control puede resultar en un bucle infinito. • Definir mal la condición puede evitar que el bucle se ejecute.En Python, los errores frecuentes son:</string>
    <string name="en_python_los_errores_frecuentes_son_la_falta_de_una_correcta_indentaci_n_o_el_uso_de_diferentes_tabulaciones_puede_generar_errores_si_se_olvida_actualizar_la_condici_n_el_programa_puede_quedar_atrapado_en_un_bucle_infinito">En Python, los errores frecuentes son: • La falta de una correcta indentación o el uso de diferentes tabulaciones puede generar errores. • Si se olvida actualizar la condición, el programa puede quedar atrapado en un bucle infinito.</string>
    <string name="_1_introducci_n_las_sentencias_if_permiten_ejecutar_un_bloque_de_c_digo_solo_si_se_cumple_una_determinada_condici_n_l_gica_son_fundamentales_en_la_toma_de_decisiones_dentro_de_cualquier_programa_su_correcto_uso_asegura_un_flujo_de_control_eficiente_y_predecible">1. Introducción Las sentencias if permiten ejecutar un bloque de código solo si se cumple una determinada condición lógica. Son fundamentales en la toma de decisiones dentro de cualquier programa. Su correcto uso asegura un flujo de control eficiente y predecible.</string>
    <string name="_2_sentencia_if_en_java_en_java_una_sentencia_if_sigue_esta_estructura_b_sica">2. Sentencia if en Java En Java, una sentencia if sigue esta estructura básica:</string>
    <string name="el_bloque_de_c_digo_dentro_del_if_se_ejecutar_solo_si_la_condici_n_l_gica_evaluada_entre_par_ntesis_es_true_por_ejemplo_si_declaramos_una_variable_int_x_10_y_comprobamos_if_x_5_el_mensaje_asociado_se_imprimir_porque_la_condici_n_es_verdadera"><![CDATA[El bloque de código dentro del if se ejecutará solo si la condición lógica evaluada entre paréntesis es true. Por ejemplo, si declaramos una variable int x = 10; y comprobamos if (x > 5), el mensaje asociado se imprimirá porque la condición es verdadera.]]></string>
    <string name="un_error_com_n_en_java_es_omitir_los_par_ntesis_en_la_condici_n_lo_que_generar_un_error_de_compilaci_n_otro_problema_puede_surgir_si_no_se_utilizan_llaves_cuando_el_bloque_contiene_m_s_de_una_l_nea_de_c_digo_en_este_caso_solo_la_primera_l_nea_se_considerar_dentro_del_if_lo_que_puede_causar_comportamientos_inesperados">Un error común en Java es omitir los paréntesis () en la condición, lo que generará un error de compilación. Otro problema puede surgir si no se utilizan llaves {} cuando el bloque contiene más de una línea de código; en este caso, solo la primera línea se considerará dentro del if, lo que puede causar comportamientos inesperados.</string>
    <string name="_3_sentencia_if_en_python_en_python_la_sentencia_if_tiene_una_estructura_m_s_concisa">3. Sentencia if en Python En Python, la sentencia if tiene una estructura más concisa:</string>
    <string name="aqu_no_es_obligatorio_usar_par_ntesis_alrededor_de_la_condici_n_aunque_se_permiten_el_bloque_de_c_digo_se_define_mediante_la_indentaci_n_lo_que_mejora_la_legibilidad_por_ejemplo_si_se_declara_x_10_y_luego_se_eval_a_if_x_5_el_mensaje_se_imprimir_porque_la_condici_n_es_verdadera"><![CDATA[Aquí no es obligatorio usar paréntesis alrededor de la condición, aunque se permiten. El bloque de código se define mediante la indentación, lo que mejora la legibilidad. Por ejemplo, si se declara x = 10 y luego se evalúa if x > 5:, el mensaje se imprimirá porque la condición es verdadera.]]></string>
    <string name="un_error_com_n_en_python_es_no_respetar_la_indentaci_n_lo_que_genera_un_indentationerror_adem_s_si_se_olvida_usar_al_final_de_la_l_nea_if_se_obtendr_un_error_de_sintaxis_es_crucial_mantener_una_indentaci_n_consistente_en_todo_el_bloque_ya_que_incluso_un_espacio_o_tabulaci_n_extra_puede_generar_errores">Un error común en Python es no respetar la indentación, lo que genera un IndentationError. Además, si se olvida usar : al final de la línea if, se obtendrá un error de sintaxis. Es crucial mantener una indentación consistente en todo el bloque, ya que incluso un espacio o tabulación extra puede generar errores.</string>
    <string name="en_java_errores_comunes_incluyen_no_usar_par_ntesis_en_la_condici_n_omitir_las_llaves_en_bloques_con_m_ltiples_l_neas">En Java, errores comunes incluyen: • No usar paréntesis () en la condición. • Omitir las llaves {} en bloques con múltiples líneas.</string>
    <string name="en_python_los_errores_m_s_frecuentes_son_indentaci_n_inconsistente_o_ausente_falta_del_car_cter_despu_s_de_la_condici_n_mezclar_espacios_y_tabulaciones_en_la_indentaci_n">En Python, los errores más frecuentes son: • Indentación inconsistente o ausente. • Falta del carácter : después de la condición. • Mezclar espacios y tabulaciones en la indentación.</string>
    <string name="_1_introducci_n_los_bucles_for_permiten_iterar_sobre_un_conjunto_de_elementos_o_realizar_una_serie_de_operaciones_repetitivas_un_n_mero_definido_de_veces_son_herramientas_clave_para_automatizar_tareas_y_recorrer_estructuras_de_datos_como_listas_arreglos_o_rangos">1. Introducción Los bucles for permiten iterar sobre un conjunto de elementos o realizar una serie de operaciones repetitivas un número definido de veces. Son herramientas clave para automatizar tareas y recorrer estructuras de datos como listas, arreglos o rangos.</string>
    <string name="_2_bucle_for_en_java_en_java_el_bucle_for_tiene_una_estructura_m_s_tradicional_y_expl_cita">2. Bucle for en Java En Java, el bucle for tiene una estructura más tradicional y explícita:</string>
    <string name="este_bucle_inicializa_una_variable_i_0_verifica_la_condici_n_i_5_y_ejecuta_el_bloque_de_c_digo_incrementando_la_variable_i_en_cada_iteraci_n"><![CDATA[Este bucle inicializa una variable (i = 0), verifica la condición (i < 5), y ejecuta el bloque de código incrementando la variable (i++) en cada iteración.]]></string>
    <string name="un_error_com_n_en_java_es_olvidarse_de_actualizar_la_variable_de_control_lo_que_puede_provocar_un_bucle_infinito_otro_error_frecuente_es_definir_mal_la_condici_n_lo_que_podr_a_resultar_en_iteraciones_inesperadas_o_en_que_el_bucle_no_se_ejecute">Un error común en Java es olvidarse de actualizar la variable de control, lo que puede provocar un bucle infinito. Otro error frecuente es definir mal la condición, lo que podría resultar en iteraciones inesperadas o en que el bucle no se ejecute.</string>
    <string name="_3_bucle_for_en_python_en_python_el_bucle_for_es_m_s_flexible_y_se_utiliza_principalmente_para_iterar_sobre_secuencias_listas_rangos_etc">3. Bucle for en Python En Python, el bucle for es más flexible y se utiliza principalmente para iterar sobre secuencias (listas, rangos, etc.):</string>
    <string name="aqu_range_5_genera_una_secuencia_de_n_meros_del_0_al_4_y_i_toma_cada_valor_en_cada_iteraci_n">Aquí, range(5) genera una secuencia de números del 0 al 4, y i toma cada valor en cada iteración.</string>
    <string name="en_python_un_error_com_n_es_intentar_modificar_la_secuencia_directamente_dentro_del_bucle_lo_que_puede_llevar_a_resultados_inesperados_adem_s_al_igual_que_con_el_if_se_debe_mantener_una_indentaci_n_consistente_de_lo_contrario_se_generar_un_indentationerror">En Python, un error común es intentar modificar la secuencia directamente dentro del bucle, lo que puede llevar a resultados inesperados. Además, al igual que con el if, se debe mantener una indentación consistente; de lo contrario, se generará un IndentationError.</string>
    <string name="en_java_los_errores_m_s_comunes_incluyen_olvidar_actualizar_la_variable_de_control_generando_un_bucle_infinito_configurar_incorrectamente_la_condici_n_lo_que_puede_llevar_a_iteraciones_no_deseadas">En Java, los errores más comunes incluyen: Olvidar actualizar la variable de control, generando un bucle infinito. Configurar incorrectamente la condición, lo que puede llevar a iteraciones no deseadas.</string>
    <string name="en_python_los_errores_frecuentes_son_no_usar_la_funci_n_range_correctamente_mezclar_espacios_y_tabulaciones_en_la_indentaci_n_intentar_modificar_la_secuencia_sobre_la_que_se_est_iterando">En Python, los errores frecuentes son: No usar la función range() correctamente. Mezclar espacios y tabulaciones en la indentación. Intentar modificar la secuencia sobre la que se está iterando.</string>
</resources>